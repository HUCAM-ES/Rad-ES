#!/usr/bin/env python

"""
    A getscu application.
"""

import argparse
import logging
import os
import socket
import sys
import time
import numpy
import io

from datetime import date

from pydicom import uid, config


from pydicom.dataset import Dataset, FileDataset
from pydicom.filewriter import write_file
from pydicom.uid import ExplicitVRLittleEndian, ImplicitVRLittleEndian, \
                        ExplicitVRBigEndian, UID

from pynetdicom3 import AE, StorageSOPClassList, QueryRetrieveSOPClassList
from pynetdicom3 import pynetdicom_uid_prefix
from pynetdicom3.pdu_primitives import SCP_SCU_RoleSelectionNegotiation

angio_study_vector = []

# logger = logging.Logger('getscu')
# stream_logger = logging.StreamHandler()
# formatter = logging.Formatter('%(levelname).1s: %(message)s')
# stream_logger.setFormatter(formatter)
# logger.addHandler(stream_logger)
# logger.setLevel(logging.ERROR)


# logger.setLevel(logging.DEBUG)
# pynetdicom_logger = logging.getLogger('pynetdicom3')
# pynetdicom_logger.setLevel(logging.DEBUG)

# logger.debug('$getscu.py v{0!s} {1!s} $'.format('0.1.0', '2016-02-15'))
# logger.debug('')

patient_struct = {
            'patient_name' : [],
            'patient_dob' : [],
            'patient_sex' : [],

            'series_uid' : [],
            'study_date' : [],
            'study_time' : [],

            'dose_PKA_total' : -1.0,
            'dose_KAPR_total' : -1.0,
            
            'fluoro_PKA_total' : -1.0,
            'fluoro_KAPR_total' : -1.0,
            
            'acq_PKA_total' : -1.0,
            'acq_KAPR_total' : -1.0,
            
            'fluoro_time_total' : -1.0,
            'acq_time_total' : -1.0,
            
            'other' : []
         }

def on_c_store(dataset):
    
    #print(dataset[0x0040a730].value)
    #if(dataset.SOPClassUID == "X-Ray Radiation Dose SR Storage"):
    #print("entrou mais")
    patient_struct['patient_name'] = str(dataset.PatientName)
    patient_struct['patient_dob'] = str(dataset.PatientBirthDate)
    patient_struct['patient_sex'] = str(dataset.PatientSex)
    try:
        patient_struct['institution'] = str(dataset.InstitutionName)
    except:
        patient_struct['institution'] = "NONE"

    patient_struct['series_uid'] = str(dataset.SeriesInstanceUID)
    patient_struct['study_date'] = str(dataset.StudyDate)
    patient_struct['study_time'] = str(dataset.StudyTime)
    
    try:
        for i in range(len(dataset[0x0040a730].value)):   
            if dataset[0x0040a730][i].dir('ContentSequence') != [] :
                for j in range(len(dataset[0x0040a730][i][0x0040a730].value)):
                    
                    if dataset[0x0040a730][i][0x0040a730][j][0x0040a043][0][0x00080104].value == 'Dose Area Product Total' :
                        patient_struct['dose_PKA_total'] = dataset[0x0040a730][i][0x0040a730][j][0x0040a300][0][0x0040a30a].value * 1000000
                    
                    if dataset[0x0040a730][i][0x0040a730][j][0x0040a043][0][0x00080104].value == 'Dose (RP) Total' :
                       patient_struct['dose_KAPR_total'] = dataset[0x0040a730][i][0x0040a730][j][0x0040a300][0][0x0040a30a].value * 1000
                    
                    if dataset[0x0040a730][i][0x0040a730][j][0x0040a043][0][0x00080104].value == 'Fluoro Dose Area Product Total' :
                       patient_struct['fluoro_PKA_total'] = dataset[0x0040a730][i][0x0040a730][j][0x0040a300][0][0x0040a30a].value * 1000000
                    
                    if dataset[0x0040a730][i][0x0040a730][j][0x0040a043][0][0x00080104].value == 'Fluoro Dose (RP) Total' :
                        patient_struct['fluoro_KAPR_total'] = dataset[0x0040a730][i][0x0040a730][j][0x0040a300][0][0x0040a30a].value * 1000
                    
                    if dataset[0x0040a730][i][0x0040a730][j][0x0040a043][0][0x00080104].value == 'Acquisition Dose Area Product Total' :
                        patient_struct['acq_PKA_total'] = dataset[0x0040a730][i][0x0040a730][j][0x0040a300][0][0x0040a30a].value * 1000000
                    
                    if dataset[0x0040a730][i][0x0040a730][j][0x0040a043][0][0x00080104].value == 'Acquisition Dose (RP) Total' :
                        patient_struct['acq_KAPR_total'] = dataset[0x0040a730][i][0x0040a730][j][0x0040a300][0][0x0040a30a].value * 1000    
                    
                    if dataset[0x0040a730][i][0x0040a730][j][0x0040a043][0][0x00080104].value == 'Total Fluoro Time' :
                        patient_struct['fluoro_time_total'] = float(dataset[0x0040a730][i][0x0040a730][j][0x0040a300][0][0x0040a30a].value)
                    
                    if dataset[0x0040a730][i][0x0040a730][j][0x0040a043][0][0x00080104].value == 'Total Acquisition Time' :
                        patient_struct['acq_time_total'] = float(dataset[0x0040a730][i][0x0040a730][j][0x0040a300][0][0x0040a30a].value)    
    except:
        pass

    angio_study_vector.append(patient_struct.copy())

    return 0x0000 # Success

def angio_get(param_patient_name, param_assoc_IP, param_port, param_calling_aet, 
              param_called_aet = 'server-dicom', param_modality = 'SR'):

    
    global angio_study_vector
    angio_study_vector = []
    
    scu_classes = [x for x in QueryRetrieveSOPClassList]
    scu_classes.extend(StorageSOPClassList)

    ae = AE(ae_title=param_calling_aet,
            port=0,
            scu_sop_class=scu_classes,
            scp_sop_class=[])



    # Set the extended negotiation SCP/SCU role selection to allow us to receive
    #   C-STORE requests for the supported SOP classes
    ext_neg = []
    for context in ae.presentation_contexts_scu:
        tmp = SCP_SCU_RoleSelectionNegotiation()
        tmp.sop_class_uid = context.AbstractSyntax
        tmp.scu_role = True
        tmp.scp_role = True

        ext_neg.append(tmp)
        
    # Request association with remote
    assoc = ae.associate(param_assoc_IP, param_port, param_called_aet, ext_neg=ext_neg)

    ae.on_c_store = on_c_store
 
    # Create query dataset

    d = Dataset()
    d.PatientName = param_patient_name
    d.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.67"
    d.StudyInstanceUID = '*'
    d.SeriesInstanceUID = '*'
    d.SOPInstanceUID = '*'
    d.BodyPartExamined = '*'
    d.Modality = param_modality
    
    query_model = 'P'

    seriesList =[]
    instList =[]
    

    # Send query
    if assoc.is_established:

        d.QueryRetrieveLevel = "SERIES"
        response = assoc.send_c_find(d, query_model=query_model)
        for (status, dataset) in response:
            try:
                seriesList.append(dataset.SeriesInstanceUID)
            except:
                pass
        #time.sleep(0.1)
        if response is not None:
            for value in response:
                pass
                
            
        d.QueryRetrieveLevel = 'IMAGE'

        for SEIUID in seriesList:

            auxList = []
            d.StudyInstanceUID = '*'
            d.SeriesInstanceUID = SEIUID
            response = assoc.send_c_find(d, query_model=query_model)
            for (status, dataset) in response:
                try:
                    auxList.append(dataset.SOPInstanceUID)
                except:
                    pass
            #time.sleep(0.1)
            if response is not None:
                for value in response:
                    pass

            instList.append(auxList)

        for i in range(len(instList)):
            if len(instList[i]) != 0:
                for j in range(len(instList[i])):
                    d.StudyInstanceUID = '*'
                    d.SeriesInstanceUID = '*'
                    d.SOPInstanceUID = instList[i][j]
                    d.PatientName = '*'
                    response = assoc.send_c_get(d, query_model=query_model)
                    for (status, dataset) in response:
                        pass
                        
                    #time.sleep(0.1)
                    if response is not None:
                        for value in response:
                            pass
        assoc.release()

    # done
    ae.quit()
    
    return angio_study_vector

    
    
def study_get(param_patient_name_vector, param_assoc_IP, param_port, param_calling_aet, 
              param_called_aet = 'server-dicom', param_modality = 'SR'):

    scu_classes = [x for x in QueryRetrieveSOPClassList]
    scu_classes.extend(StorageSOPClassList)

    ae = AE(ae_title=param_calling_aet,
            port=0,
            scu_sop_class=scu_classes,
            scp_sop_class=[])



    # Set the extended negotiation SCP/SCU role selection to allow us to receive
    #   C-STORE requests for the supported SOP classes
    ext_neg = []
    for context in ae.presentation_contexts_scu:
        tmp = SCP_SCU_RoleSelectionNegotiation()
        tmp.sop_class_uid = context.AbstractSyntax
        tmp.scu_role = True
        tmp.scp_role = True

        ext_neg.append(tmp)
        
    # Request association with remote
    assoc = ae.associate(param_assoc_IP, param_port, param_called_aet, ext_neg=ext_neg)

    # Create query dataset

    d = Dataset()
    d.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.67"
    d.StudyInstanceUID = '*'
    d.SeriesInstanceUID = '*'
    d.SOPInstanceUID = '*'
    d.BodyPartExamined = '*'
    d.Modality = param_modality
    
    query_model = 'P'

    seriesList =[]
    
    for patient_name in param_patient_name_vector:
        d.PatientName = patient_name+"*"
        d.StudyInstanceUID = '*'
        d.SeriesInstanceUID = '*'
        d.SOPInstanceUID = '*'
        d.BodyPartExamined = '*'
        
        # Send query
        if assoc.is_established:

            d.QueryRetrieveLevel = "SERIES"
            response = assoc.send_c_find(d, query_model=query_model)
            for (status, dataset) in response:
                try:
                    seriesList.append(dataset.SeriesInstanceUID)
                except:
                    pass
            if response is not None:
                for value in response:
                    pass

    assoc.release()

    # done
    ae.quit()
    
    return seriesList
    
    
def angio_get_by_uid(param_uid_list, param_assoc_IP, param_port, param_calling_aet, 
              param_called_aet = 'server-dicom', param_modality = 'SR'):
    
    global angio_study_vector
    angio_study_vector = []
    scu_classes = [x for x in QueryRetrieveSOPClassList]
    scu_classes.extend(StorageSOPClassList)

    ae = AE(ae_title=param_calling_aet,
            port=0,
            scu_sop_class=scu_classes,
            scp_sop_class=[])

    # Set the extended negotiation SCP/SCU role selection to allow us to receive
    #   C-STORE requests for the supported SOP classes
    ext_neg = []
    for context in ae.presentation_contexts_scu:
        tmp = SCP_SCU_RoleSelectionNegotiation()
        tmp.sop_class_uid = context.AbstractSyntax
        tmp.scu_role = True
        tmp.scp_role = True

        ext_neg.append(tmp)
        
    # Request association with remote
    assoc = ae.associate(param_assoc_IP, param_port, param_called_aet, ext_neg=ext_neg)

    ae.on_c_store = on_c_store
 
    # Create query dataset

    d = Dataset()
    d.PatientName = '*'
    d.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.67"
    d.StudyInstanceUID = '*'
    d.SeriesInstanceUID = '*'
    d.SOPInstanceUID = '*'
    d.BodyPartExamined = "*"
    d.Modality = param_modality
    
    query_model = 'P'

    seriesList =[]
    instList =[]
    

    # Send query
    if assoc.is_established:

        d.QueryRetrieveLevel = 'IMAGE'

        for SEIUID in param_uid_list:

            auxList = []
            d.SeriesInstanceUID = SEIUID
            response = assoc.send_c_find(d, query_model=query_model)
            for (status, dataset) in response:
                try:
                    #print(dataset.SOPClassUID)
                    auxList.append(dataset.SOPInstanceUID)
                except:
                    pass
            #time.sleep(0.1)
            if response is not None:
                for value in response:
                    pass

            instList.append(auxList)

        for i in range(len(instList)):
            if len(instList[i]) != 0:
                for j in range(len(instList[i])):
                    d.StudyInstanceUID = '*'
                    d.SeriesInstanceUID = '*'
                    d.SOPInstanceUID = instList[i][j]
                    d.PatientName = '*'
                    response = assoc.send_c_get(d, query_model=query_model)
                    for (status, dataset) in response:
                        pass
                        
                    #time.sleep(0.1)
                    if response is not None:
                        for value in response:
                            pass
        assoc.release()

    # done
    ae.quit()
    
    return angio_study_vector
    
    
def name_get_by_date_fixed(param_days_months_back, param_assoc_IP, param_port, param_calling_aet, 
              param_called_aet = 'server-dicom', param_modality = 'SR'):
    
    param_days_back = param_days_months_back[0]
    param_months_back = param_days_months_back[1]
    
    # Set date range
    date_today = date.today()
    date_range = date(date_today.year, date_today.month - int(param_months_back), date_today.day - int(param_days_back)).strftime('%Y%m%d')+'-'+date_today.strftime('%Y%m%d')
    
    scu_classes = [x for x in QueryRetrieveSOPClassList]
    scu_classes.extend(StorageSOPClassList)

    ae = AE(ae_title=param_calling_aet,
            port=0,
            scu_sop_class=scu_classes,
            scp_sop_class=[])

    # Set the extended negotiation SCP/SCU role selection to allow us to receive
    #   C-STORE requests for the supported SOP classes
    ext_neg = []
    for context in ae.presentation_contexts_scu:
        tmp = SCP_SCU_RoleSelectionNegotiation()
        tmp.sop_class_uid = context.AbstractSyntax
        tmp.scu_role = True
        tmp.scp_role = True

        ext_neg.append(tmp)
        
    # Request association with remote
    assoc = ae.associate(param_assoc_IP, param_port, param_called_aet, ext_neg=ext_neg)

    ae.on_c_store = on_c_store
 
    # Create query dataset

    d = Dataset()
    d.StudyDate = date_range
    # From mid-night and one to mid-night and one
    d.StudyTime = "0001-2359"
    d.PatientName = '*'
    d.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.67"
    d.StudyInstanceUID = '*'
    d.SeriesInstanceUID = '*'
    d.SOPInstanceUID = '*'
    d.BodyPartExamined = '*'
    d.Modality = param_modality
    
    query_model = 'P'

    nameList = []
    
    # Send query
    if assoc.is_established:

        d.QueryRetrieveLevel = "SERIES"
        response = assoc.send_c_find(d, query_model=query_model)
        for (status, dataset) in response:
            try:
                if str(dataset.PatientName) not in nameList:
                    nameList.append(str(dataset.PatientName))
            except:
                pass
        if response is not None:
            for value in response:
                pass

        assoc.release()

    # done
    ae.quit()
    
    return nameList

    
def name_get_by_date_period(param_date_before_after, param_assoc_IP, param_port, param_calling_aet, 
              param_called_aet = 'server-dicom', param_modality = 'SR'):
    
    param_date_before = param_date_before_after[0]
    param_date_after = param_date_before_after[1]
    
    # Set date range 
    date_range = "".join(param_date_before.split('-'))+'-'+"".join(param_date_after.split('-'))
    
    scu_classes = [x for x in QueryRetrieveSOPClassList]
    scu_classes.extend(StorageSOPClassList)

    ae = AE(ae_title=param_calling_aet,
            port=0,
            scu_sop_class=scu_classes,
            scp_sop_class=[])

    # Set the extended negotiation SCP/SCU role selection to allow us to receive
    #   C-STORE requests for the supported SOP classes
    ext_neg = []
    for context in ae.presentation_contexts_scu:
        tmp = SCP_SCU_RoleSelectionNegotiation()
        tmp.sop_class_uid = context.AbstractSyntax
        tmp.scu_role = True
        tmp.scp_role = True

        ext_neg.append(tmp)
        
    # Request association with remote
    assoc = ae.associate(param_assoc_IP, param_port, param_called_aet, ext_neg=ext_neg)

    ae.on_c_store = on_c_store
 
    # Create query dataset
    
    d = Dataset()
    d.StudyDate = date_range
    # From mid-night and one to mid-night and one
    d.StudyTime = "0001-2359"
    d.PatientName = '*'
    d.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.67"
    d.StudyInstanceUID = '*'
    d.SeriesInstanceUID = '*'
    d.SOPInstanceUID = '*'
    d.BodyPartExamined = '*'
    d.Modality = param_modality
    
    query_model = 'P'

    nameList = []
    
    # Send query
    if assoc.is_established:

        d.QueryRetrieveLevel = "SERIES"
        response = assoc.send_c_find(d, query_model=query_model)
        for (status, dataset) in response:
            try:
                if str(dataset.PatientName) not in nameList:
                    nameList.append(str(dataset.PatientName))
            except:
                pass
        if response is not None:
            for value in response:
                pass

        assoc.release()

    # done
    ae.quit()
    
    return nameList

    
def name_get_by_date_period_fast(param_date_before_after, param_assoc_IP, param_port, param_calling_aet, 
              param_called_aet = 'server-dicom', param_modality = 'SR'):
    
    param_date_before = param_date_before_after[0]
    param_date_after = param_date_before_after[1]
    
    # Set date range 
    date_range = "".join(param_date_before.split('-'))+'-'+"".join(param_date_after.split('-'))
    
    scu_classes = [x for x in QueryRetrieveSOPClassList]
    scu_classes.extend(StorageSOPClassList)

    ae = AE(ae_title=param_calling_aet,
            port=0,
            scu_sop_class=scu_classes,
            scp_sop_class=[])

    # Set the extended negotiation SCP/SCU role selection to allow us to receive
    #   C-STORE requests for the supported SOP classes
    ext_neg = []
    for context in ae.presentation_contexts_scu:
        tmp = SCP_SCU_RoleSelectionNegotiation()
        tmp.sop_class_uid = context.AbstractSyntax
        tmp.scu_role = True
        tmp.scp_role = True

        ext_neg.append(tmp)
        
    # Request association with remote
    assoc = ae.associate(param_assoc_IP, param_port, param_called_aet, ext_neg=ext_neg)

    ae.on_c_store = on_c_store
 
    # Create query dataset
    
    d = Dataset()
    d.StudyDate = date_range
    # From mid-night and one to mid-night and one
    d.StudyTime = "0001-2359"
    d.PatientName = '*'
    d.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.67"
    d.StudyInstanceUID = '*'
    d.SeriesInstanceUID = '*'
    d.SOPInstanceUID = '*'
    d.BodyPartExamined = '*'
    d.Modality = param_modality
    
    query_model = 'P'

    nameList = []
    uidList = []
    
    # Send query
    if assoc.is_established:

        d.QueryRetrieveLevel = "SERIES"
        response = assoc.send_c_find(d, query_model=query_model)
        for (status, dataset) in response:
            try:
                if str(dataset.PatientName) not in nameList:
                    nameList.append(str(dataset.PatientName))
            except:
                pass
        if response is not None:
            for value in response:
                pass
        
        for name in nameList:
            d = Dataset()
            d.PatientName = name
            d.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.67"
            d.StudyInstanceUID = '*'
            d.SeriesInstanceUID = '*'
            d.SOPInstanceUID = '*'
            d.BodyPartExamined = '*'
            d.Modality = param_modality
            d.QueryRetrieveLevel = "SERIES"
            
            response = assoc.send_c_find(d, query_model=query_model)
            for (status, dataset) in response:
                try:
                    uidList.append(dataset.SeriesInstanceUID)
                except:
                    pass 
            if response is not None:
                for value in response:
                    pass
        
        
        assoc.release()

    # done
    ae.quit()
    
    return uidList
