#!/usr/bin/env python

"""
    A dcmtk style storescp application.

    Used as a SCP for sending DICOM objects to
"""

import argparse
import logging
import os
import socket
import sys

from pydicom.dataset import Dataset, FileDataset
from pydicom.filewriter import write_file
from pydicom.uid import ExplicitVRLittleEndian, ImplicitVRLittleEndian, \
    ExplicitVRBigEndian, DeflatedExplicitVRLittleEndian

from pynetdicom3 import AE, StorageSOPClassList, VerificationSOPClass
from pynetdicom3 import pynetdicom_uid_prefix

filepath = os.getcwd()

def setup_logger():
    """Setup the logger"""
    logger = logging.Logger('storescp')
    stream_logger = logging.StreamHandler()
    formatter = logging.Formatter('%(levelname).1s: %(message)s')
    stream_logger.setFormatter(formatter)
    logger.addHandler(stream_logger)
    logger.setLevel(logging.ERROR)

    return logger

LOGGER = setup_logger()


LOGGER.setLevel(logging.DEBUG)
pynetdicom_logger = logging.getLogger('pynetdicom3')
pynetdicom_logger.setLevel(logging.DEBUG)

LOGGER.debug('$storescp.py v{0!s} {1!s} $'.format('0.2.0', '2016-03-23'))
LOGGER.debug('')

# Validate port
if isinstance(4096, int):
    test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    test_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        test_socket.bind((os.popen('hostname').read()[:-1], 4096))
    except socket.error:
        LOGGER.error("Cannot listen on port {0:d}, insufficient priveleges".format(4096))
        sys.exit()

# Set Transfer Syntax options
transfer_syntax = [ImplicitVRLittleEndian,
                   ExplicitVRLittleEndian,
                   DeflatedExplicitVRLittleEndian,
                   ExplicitVRBigEndian]



def on_c_store(dataset):
    """
    Write `dataset` to file as little endian implicit VR

    Parameters
    ----------
    dataset : pydicom.dataset.Dataset
        The DICOM dataset sent via the C-STORE

    Returns
    -------
    status : pydicom.dataset.Dataset
        A Dataset containing a Status element with a value valid for the
        Storage Service Class (see PS3.4 annex B.2.3). The dataset may also
        contain optional elements related to the Status (see PS3.7 Annex C).
    """
    mode_prefix = 'UN'
    mode_prefixes = {'CT Image Storage' : 'CT',
                     'Enhanced CT Image Storage' : 'CTE',
                     'MR Image Storage' : 'MR',
                     'Enhanced MR Image Storage' : 'MRE',
                     'Positron Emission Tomography Image Storage' : 'PT',
                     'Enhanced PET Image Storage' : 'PTE',
                     'RT Image Storage' : 'RI',
                     'RT Dose Storage' : 'RD',
                     'RT Plan Storage' : 'RP',
                     'RT Structure Set Storage' : 'RS',
                     'Computed Radiography Image Storage' : 'CR',
                     'Ultrasound Image Storage' : 'US',
                     'Enhanced Ultrasound Image Storage' : 'USE',
                     'X-Ray Angiographic Image Storage' : 'XA',
                     'Enhanced XA Image Storage' : 'XAE',
                     'Nuclear Medicine Image Storage' : 'NM',
                     'Secondary Capture Image Storage' : 'SC'}

    try:
        mode_prefix = mode_prefixes[dataset.SOPClassUID.__str__()]
    except:
        pass

    filename = '{0!s}.{1!s}'.format(mode_prefix, dataset.SOPInstanceUID)
    LOGGER.info('Storing DICOM file: {0!s}'.format(filename))

    if os.path.exists(filename):
        LOGGER.warning('DICOM file already exists, overwriting')

    meta = Dataset()
    meta.MediaStorageSOPClassUID = dataset.SOPClassUID
    meta.MediaStorageSOPInstanceUID = dataset.SOPInstanceUID
    meta.ImplementationClassUID = pynetdicom_uid_prefix

    ds = FileDataset(filename, {}, file_meta=meta, preamble=b"\0" * 128)
    ds.update(dataset)

    ds.is_little_endian = True
    ds.is_implicit_VR = True

    status_ds = Dataset()

    
    # Try to save to output-directory
    
    filename = os.path.join(os.getcwd(), filename)

    try:
        ds.save_as(filename)
        status_ds.Status = 0x0000 # Success
    except IOError:
        LOGGER.error('Could not write file to specified directory:')
        LOGGER.error("    {0!s}".format(os.path.dirname(filename)))
        LOGGER.error('Directory may not exist or you may not have write '
                'permission')
        # Failed - Out of Resources - IOError
        status_ds.Status = 0xA700
    except:
        LOGGER.error('Could not write file to specified directory:')
        LOGGER.error("    {0!s}".format(os.path.dirname(filename)))
        # Failed - Out of Resources - Miscellaneous error
        status_ds.Status = 0xA701

    return status_ds

# Test output-directory

if not os.access(filepath, os.W_OK|os.X_OK):
    LOGGER.error("No write permissions or the output directory may not exist:")
    LOGGER.error("    {0!s}".format(filepath))
    sys.exit()

scp_classes = [x for x in StorageSOPClassList]
scp_classes.append(VerificationSOPClass)

# Create application entity
ae = AE(ae_title='projetoDoses',
        port=4096,
        bind_addr='10.5.137.234',
        scu_sop_class=[],
        scp_sop_class=scp_classes,
        transfer_syntax=transfer_syntax)

ae.on_c_store = on_c_store

ae.start()
