
"""
    A getscu application.
"""

import argparse
import logging
import os
import socket
import sys
import time
import numpy
import pytesseract
import io


import matplotlib.pyplot as plt
from pydicom import uid, config

try:
    import Image
    print("IMPORTED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
except ImportError:
    from PIL import Image
    print("IMPORTED2!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

from pydicom.dataset import Dataset, FileDataset
from pydicom.filewriter import write_file
from pydicom.uid import ExplicitVRLittleEndian, ImplicitVRLittleEndian, \
                        ExplicitVRBigEndian, UID

from pynetdicom3 import AE, StorageSOPClassList, QueryRetrieveSOPClassList
from pynetdicom3 import pynetdicom_uid_prefix
from pynetdicom3.pdu_primitives import SCP_SCU_RoleSelectionNegotiation

pytesseract.pytesseract.tesseract_cmd = 'C:\\Users\\Esthevao\\AppData\\Local\\Programs\\Python\\Python36-32\\Lib\\site-packages\\pytesseract'

logger = logging.Logger('getscu')
stream_logger = logging.StreamHandler()
formatter = logging.Formatter('%(levelname).1s: %(message)s')
stream_logger.setFormatter(formatter)
logger.addHandler(stream_logger)
logger.setLevel(logging.ERROR)


logger.setLevel(logging.DEBUG)
pynetdicom_logger = logging.getLogger('pynetdicom3')
pynetdicom_logger.setLevel(logging.DEBUG)

logger.debug('$getscu.py v{0!s} {1!s} $'.format('0.1.0', '2016-02-15'))
logger.debug('')

scu_classes = [x for x in QueryRetrieveSOPClassList]
scu_classes.extend(StorageSOPClassList)

ae = AE(ae_title="projetoDoses",
        port=0,
        scu_sop_class=scu_classes,
        scp_sop_class=[])


# Set the extended negotiation SCP/SCU role selection to allow us to receive
#   C-STORE requests for the supported SOP classes
ext_neg = []
for context in ae.presentation_contexts_scu:
    tmp = SCP_SCU_RoleSelectionNegotiation()
    tmp.sop_class_uid = context.AbstractSyntax
    tmp.scu_role = True
    tmp.scp_role = True

    ext_neg.append(tmp)
    

# Request association with remote
assoc = ae.associate('10.5.136.10', 4096, 'server-dicom', ext_neg=ext_neg)



def on_c_store(dataset):

        
    print('-------------------------------------------------------------------------------')   
    print(dataset)
    print('-------------------------------------------------------------------------------')   
   

    return 0x0000 # Success

ae.on_c_store = on_c_store

# Create query dataset

d = Dataset()
#d.PatientName= 'ALVINO LEAL CAZAROTO' #'MARIA DAS GRACAS ALVES COSTA' #'GENNY FERES FAVERO' #'MARGARIDA DOS SANTOS OLIVEIRA'
d.StudyInstanceUID = '1.2.392.200036.9116.2.5.1.37.2420762805.1532304222.649903'
d.SeriesInstanceUID = '*'
d.SOPInstanceUID = '*'
d.BodyPartExamined = "*"
d.QueryRetrieveLevel = "STUDY"
#d.InstanceNumber = 1
#d.SeriesNumber = 9000
#d.Modality = 'SR'

# d.StudyInstanceUID = '1.2.392.200036.9116.2.5.1.37.2418728817.1457303667.507231'
# d.SeriesInstanceUID = '1.2.392.200036.9116.2.5.1.37.2418728817.1457304884.233164'
# d.SOPInstanceUID = '*' #'1.2.392.200036.9116.2.5.1.37.2418728817.1457304892.204109' 

studyList =[]
seriesList =[]
instList =[]

responses = assoc.send_c_get(d, query_model='P')

for (status, dataset) in responses:
    # While status is pending we should get the matching datasets
    if status == 'Pending':
        print('pending')   
    elif status == 'Success':
        print('C-FIND finished, releasing the association')
    elif status == 'Cancel':
        print('C-FIND cancelled, releasing the association')
    elif status == 'Failure':
        print('C-FIND failed, releasing the association')
    # Release the association
assoc.release()